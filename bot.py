#!/usr/bin/python
# -*- coding: utf-8 -*-
from os import stat
from aiogram import Bot, types
from variables import *
from models import *
from sqlalchemy.ext.declarative import declarative_base
from aiogram.dispatcher import Dispatcher
from config import TOKEN
from aiogram.utils import executor
from aiogram.types import reply_keyboard
from aiogram.types.message import Message
from random import choice
from keyboards import *
import asyncio
import aiohttp
import time
import datetime
from config import *
from sqlalchemy import create_engine
from sqlalchemy.orm import Session, sessionmaker


Session = sessionmaker()
engine = create_engine("sqlite:///prodb.db")
Session.configure(bind=engine)

default_keyboards = {
    "User": user_main_menu_keyboard,
    "UndefinedKoala": phone_request_keyboard,
}


async def get_event_type(event):
    pass


async def get_user_state_from_inline_commands(message):
    session = Session()
    print(message)
    customer = (
        session.query(Customer)
        .filter(Customer.id == message["message"]["chat"]["id"])
        .first()
    )
    if customer:
        return customer.current_state
    else:
        customer = Customer(
            id=message["from"]["id"],
            username=message["from"]["username"],
            current_state="UndefinedKoala",
        )
        session.add(customer)
        session.commit()
        return "UndefinedKoala"


async def get_user_state_from_text_commands(message):
    session = Session()
    print(message)
    customer = (
        session.query(Customer).filter(Customer.id == message["chat"]["id"]).first()
    )
    if customer:
        return customer.current_state
    else:
        customer = Customer(
            id=message["from"]["id"],
            username=message["from"]["username"],
            current_state="UndefinedKoala",
        )
        session.add(customer)
        session.commit()
        return "UndefinedKoala"


class BaseState:
    @staticmethod
    async def send_default_keyboard(alert, message=None):
        message.answer(
            alert,
            reply_markup=default_keyboards[
                get_user_state_from_text_commands(message["chat"]["id"])
            ],
        )

    @staticmethod
    async def set_default_state(message):
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["chat"]["id"]).first()
        )
        customer.current_state = ""


class OnboardingState:
    @staticmethod
    async def commands_handler(message):
        try:
            if message["id"]:
                command = message["data"]
        except KeyError as error:
            pass
        try:
            if message["message_id"]:
                command = message["text"]
        except KeyError as error:
            pass
        try:
            await OnboardingState_commands[command](message)
        except KeyError as error:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    @staticmethod
    async def send_onboarding_step(message):
        print(message, "—Ç–∏–º—É—Ä")
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["from"]["id"]).first()
        )
        await bot.edit_message_text(
            onboarding_steps[customer.onboarding_page],
            customer.id,
            customer.last_sended_message_id,
        )
        if customer.onboarding_page == 1:
            await bot.edit_message_reply_markup(
                customer.id,
                customer.last_sended_message_id,
                reply_markup=first_onboarding_step_keyboard,
            )
        elif 1 <= customer.onboarding_page < 5:
            print("PIZDEC")
            await bot.edit_message_reply_markup(
                customer.id,
                customer.last_sended_message_id,
                reply_markup=next_prev_onboarding_keyboard,
            )
        elif customer.onboarding_page == 5:
            await bot.edit_message_reply_markup(
                customer.id, customer.last_sended_message_id
            )
            await OnboardingState.exit_onboarding_state(message)

    @staticmethod
    async def set_next_onboarding_step(message):
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["from"]["id"]).first()
        )
        if customer.onboarding_page <= 5:
            customer.onboarding_page += 1
            session.commit()
            await OnboardingState.send_onboarding_step(message)

    @staticmethod
    async def set_prev_onboarding_step(message):
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["from"]["id"]).first()
        )
        if customer.onboarding_page > 1:
            customer.onboarding_page -= 1
            session.commit()
            await OnboardingState.send_onboarding_step(message)

    @staticmethod
    async def exit_onboarding_state(message):
        print("ewe")
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["from"]["id"]).first()
        )
        customer.state = "UndefinedKoala"
        customer.onboarding_page = 1
        session.commit()
        await bot.send_message(
            customer.id,
            "–í–∂—É—Ö! –ò –º–∞–≥–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –æ –∫–æ—Ç–æ—Ä–æ–π —è –≥–æ–≤–æ—Ä–∏–ª, –æ—Ç–∫—Ä—ã–ª–∞—Å—å –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Ç–æ–ª—å–∫–æ —á—Ç–æ!",
            reply_markup=user_main_menu_keyboard,
        )


class GameState:
    pass


class EducationState:
    pass


class UndefinedKoala(BaseState):
    @staticmethod
    async def commands_handler(message):
        try:
            if message["id"]:
                command = message["data"]
        except KeyError as error:
            pass
        try:
            if message["message_id"]:
                command = message["text"]
        except KeyError as error:
            pass
        try:
            await UndefinedKoala_commands[command](message)
        except KeyError as error:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    @staticmethod
    async def send_onboarding_request(message):
        await asyncio.sleep(1.5)
        last_message = await message.answer(
            "‚ö†Ô∏è –•–æ—á–µ—à—å —è —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∂—É, –∏–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç –±–æ—Ç –∏ –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?",
            reply_markup=onboarding_request_keyboard,
        )
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["chat"]["id"]).first()
        )
        customer.last_sended_message_id = last_message["message_id"]
        session.commit()

    @staticmethod
    async def cancel_onboarding_request(message):
        pass

    @staticmethod
    async def accept_onboarding_request(message):
        print(15)
        session = Session()
        customer = (
            session.query(Customer)
            .filter(Customer.id == message["message"]["chat"]["id"])
            .first()
        )
        customer.current_state = "OnboardingState"
        session.commit()
        await OnboardingState.send_onboarding_step(message)

    @staticmethod
    async def start(message):
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! \n\n–≠—Ç–æ Tatrika ‚Äî –±–æ—Ç, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑—É—á–∞—Ç—å —Ç–∞—Ç–∞—Ä—Å–∫–∏–π —è–∑—ã–∫, —Ç—Ä–∞—Ç—è –≤—Å–µ–≥–æ 15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å!\n\n–ü—Ä–æ—Ö–æ–¥–∏ –º–∏–Ω–∏-—É—Ä–æ–∫–∏, —Å–æ—Ä–µ–≤–Ω—É–π—Å—è –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏ –≤ –∏–≥—Ä–∞—Ö, –∞ –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–º–µ–ª–æ –∑–∞–¥–∞–≤–∞–π –∏—Ö —Å–≤–æ–µ–º—É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É."
        )
        await asyncio.sleep(1.5)
        await UndefinedKoala.send_onboarding_request(message)

    @staticmethod
    async def auth_with_phone(message):
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["chat"]["id"]).first()
        )
        if customer:
            if customer.phone_number:
                await message.answer(
                    "–¢—ã —É–∂–µ –¥–µ–ª–∏–ª—Å—è —Å –Ω–∞–º–∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üòú"
                )
            else:
                customer.phone_number = message.contact.phone_number
                customer.current_state = "User"
                session.commit()
                await message.answer(
                    "–£—Ä–∞! üéä –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                    reply_markup=empty_keyboard,
                )
        else:
            await message.answer(
                "–î–µ–ª–∏—à—å—Å—è –Ω–æ–º–µ—Ä–æ–º –µ—â—ë –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ —Ç–µ–±—è –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –æ–± —ç—Ç–æ–º???\n\n–ù—É –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!"
            )

    @staticmethod
    async def send_phone_request_message(message):
        await message.answer(
            "–ü–æ–¥–µ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –Ω–∞ —Å–∞–π—Ç–µ.\n\n–ó–∞—á–µ–º –º–Ω–µ –Ω—É–∂–µ–Ω –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç?\n‚ú≥ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏–∑—É—á–µ–Ω–∏–∏ —Ç–∞—Ç–∞—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n\n–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å, —ç—Ç–æ—Ç —à–∞–≥ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
            reply_markup=phone_request_keyboard,
        )

    @staticmethod
    async def cancel_phone_request(message):
        await message.answer(
            "–•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å–ª–∏ –≤—Å—ë –∂–µ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.",
            reply_markup=empty_keyboard,
        )
        await UndefinedKoala.send_onboarding_request(message)


class User(BaseState):
    @staticmethod
    async def commands_handler(message):
        try:
            if message["id"]:
                command = message["data"]
        except KeyError as error:
            pass
        try:
            if message["message_id"]:
                command = message["text"]
        except KeyError as error:
            pass
        try:
            print(command)
            await User_commands[command](message)
        except Exception as error:
            await message.answer(error)

    @staticmethod
    async def start(message):
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! \n\n–≠—Ç–æ Tatrika ‚Äî –±–æ—Ç, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑—É—á–∞—Ç—å —Ç–∞—Ç–∞—Ä—Å–∫–∏–π —è–∑—ã–∫, —Ç—Ä–∞—Ç—è –≤—Å–µ–≥–æ 15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å!\n\n–ü—Ä–æ—Ö–æ–¥–∏ –º–∏–Ω–∏-—É—Ä–æ–∫–∏, —Å–æ—Ä–µ–≤–Ω—É–π—Å—è –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏ –≤ –∏–≥—Ä–∞—Ö, –∞ –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–º–µ–ª–æ –∑–∞–¥–∞–≤–∞–π –∏—Ö —Å–≤–æ–µ–º—É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É."
        )


OnboardingState_commands = {
    "next_onboarding_step": OnboardingState.set_next_onboarding_step,
    "prev_onboarding_step": OnboardingState.set_prev_onboarding_step,
}


UndefinedKoala_commands = {
    "/start": UndefinedKoala.start,
    "accept_onboarding_request": UndefinedKoala.accept_onboarding_request,
    "cancel_onboarding_request": UndefinedKoala.cancel_onboarding_request,
}

User_commands = {
    "/start": User.start,
    "–ò–∑—É—á–∞—Ç—å": 0,
    "–ò–≥—Ä–∞—Ç—å": 0,
    "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å": 0,
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏": 0,
}

states = {
    "UndefinedKoala": UndefinedKoala,
    "EducationState": EducationState,
    "OnboardingState": OnboardingState,
    "User": User,
}


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler()
async def text_commands_handler(message):
    user_state = await get_user_state_from_text_commands(message)
    await states[user_state].commands_handler(message)


@dp.callback_query_handler()
async def inline_commands_handler(message):
    user_state = await get_user_state_from_inline_commands(message)
    await states[user_state].commands_handler(message)


@dp.message_handler(content_types=["contact"])
async def get_contact(message):
    user_state = await get_user_state_from_text_commands(message)
    await states[user_state].auth_with_phone(message)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
