#!/usr/bin/python
# -*- coding: utf-8 -*-
from os import stat
from aiogram import Bot, types
from requests import check_compatibility
from variables import *
from models import *
from sqlalchemy.ext.declarative import declarative_base
from aiogram.dispatcher import Dispatcher
from config import TOKEN
from aiogram.utils import executor
from aiogram.types import reply_keyboard
from aiogram.types.message import Message
from random import choice
from keyboards import *
import asyncio
import aiohttp
import time
import datetime
from config import *
from sqlalchemy import create_engine
from sqlalchemy.orm import Session, sessionmaker


Session = sessionmaker()
engine = create_engine("sqlite:///prodb.db")
Session.configure(bind=engine)

default_keyboards = {
    "User": UndefinedKoala_keyboard,
    "UndefinedKoala": phone_request_keyboard,
}


async def get_event_type(event):
    pass


async def get_user_state_from_inline_commands(message):
    session = Session()
    customer = (
        session.query(Customer)
        .filter(Customer.id == message["message"]["chat"]["id"])
        .first()
    )
    if customer:
        return customer.current_state
    else:
        customer = Customer(
            id=message["from"]["id"],
            username=message["from"]["username"],
            current_state="UndefinedKoala",
        )
        session.add(customer)
        session.commit()
        return "UndefinedKoala"


async def get_user_state_from_text_commands(message):
    session = Session()
    customer = (
        session.query(Customer).filter(Customer.id == message["chat"]["id"]).first()
    )
    if customer:
        return customer.current_state
    else:
        customer = Customer(
            id=message["from"]["id"],
            username=message["from"]["username"],
            current_state="UndefinedKoala",
        )
        session.add(customer)
        session.commit()
        return "UndefinedKoala"


class LKState:
    @staticmethod
    async def start(message):
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["chat"]["id"]).first()
        )
        customer.current_state = "LKState"
        session.commit()
        if customer.phone_number:
            await message.answer(
                "–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ [—Å—Å—ã–ª–∫–∞], –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –∏ –≤–≤–µ–¥–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥—ë—Ç —Ç–µ–±–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ"
            )
        else:
            await UndefinedKoala.send_phone_request(message)


class MentoringState:
    @staticmethod
    async def commands_handler(message):
        await MentoringState.check_question(message)

    @staticmethod
    async def start(message):
        await message.answer(
            f"‚ö† –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, –∏ –Ω–∞—à–∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Ç—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å!\n\n–ù–µ –∑–∞–±—É–¥—å, –≤–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º –∏–ª–∏ –∏–≥—Ä–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {suitable_question_length} —Å–∏–º–≤–æ–ª–æ–≤."
        )
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["chat"]["id"]).first()
        )
        customer.current_state = "MentoringState"
        session.commit()

    @staticmethod
    async def check_question(message):
        if len(message.text) <= suitable_question_length:
            await message.answer(
                f"‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–∞–Ω! –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –º—ã —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏—à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
            )
            session = Session()
            question = Question(customer_id=message["chat"]["id"], text=message.text)
            customer = (
                session.query(Customer)
                .filter(Customer.id == message["chat"]["id"])
                .first()
            )
            customer.current_state = customer.default_state
            session.add(question)
            session.commit()

        else:
            await message.answer(
                f"‚ö† –î–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—É—á–∏–ª–∞—Å—å –±–æ–ª—å—à–µ, —á–µ–º {suitable_question_length}. –°–æ–∫—Ä–∞—Ç–∏ –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–ø–∏—à–∏ –µ–≥–æ —Å–Ω–æ–≤–∞."
            )


class BaseState:
    @staticmethod
    async def exit(message):
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["chat"]["id"]).first()
        )
        customer.current_state = customer.default_state
        session.commit()
        await message.answer(
            "–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω.",
            reply_markup=keyboards[await get_user_state_from_text_commands(message)],
        )


class OnboardingState(BaseState):
    @staticmethod
    async def commands_handler(message):
        try:
            if message["id"]:
                command = message["data"]
        except KeyError as error:
            pass
        try:
            if message["message_id"]:
                command = message["text"]
        except KeyError as error:
            pass
        try:
            await OnboardingState_commands[command](message)
        except KeyError as error:
            await message.answer(
                f"–ö–æ–º–∞–Ω–¥–∞ {command} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–≤–µ–¥–∏ /exit, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω."
            )

    @staticmethod
    async def send_onboarding_step(message):
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["from"]["id"]).first()
        )
        if 1 <= customer.onboarding_page <= 4:
            await bot.edit_message_text(
                onboarding_steps[customer.onboarding_page],
                customer.id,
                customer.last_sended_message_id,
            )
            if customer.onboarding_page == 1:
                await bot.edit_message_reply_markup(
                    customer.id,
                    customer.last_sended_message_id,
                    reply_markup=first_onboarding_step_keyboard,
                )
            else:
                await bot.edit_message_reply_markup(
                    customer.id,
                    customer.last_sended_message_id,
                    reply_markup=next_prev_onboarding_keyboard,
                )
        elif customer.onboarding_page == 5:
            await bot.delete_message(customer.id, customer.last_sended_message_id)
            await OnboardingState.exit_onboarding_state(message)

    @staticmethod
    async def set_next_onboarding_step(message):
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["from"]["id"]).first()
        )
        if customer.onboarding_page <= 4:
            customer.onboarding_page += 1
            session.commit()
            await OnboardingState.send_onboarding_step(message)

    @staticmethod
    async def set_prev_onboarding_step(message):
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["from"]["id"]).first()
        )
        if customer.onboarding_page > 1:
            customer.onboarding_page -= 1
            session.commit()
            await OnboardingState.send_onboarding_step(message)

    @staticmethod
    async def exit_onboarding_state(message):
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["from"]["id"]).first()
        )
        customer.current_state = "UndefinedKoala"
        customer.onboarding_page = 1
        session.commit()
        await bot.send_message(
            customer.id,
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n–ú—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ —Ç–µ–±–µ –æ–± –≤—Å—ë–º, —á—Ç–æ –∑–Ω–∞–µ–º –æ –±–æ—Ç–µ, –∞ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ ‚Äî –Ω–µ –±–µ–¥–∞! –í—Å–µ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ —Å–∞–º–æ–º—É, –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –ø–æ–º–æ—â–∏ üòâ",
            reply_markup=UndefinedKoala_keyboard,
        )


class GameState:
    pass


class EducationState:
    pass


class UndefinedKoala(BaseState):
    @staticmethod
    async def commands_handler(message):
        try:
            if message["id"]:
                command = message["data"]
        except KeyError as error:
            pass
        try:
            if message["message_id"]:
                command = message["text"]
        except KeyError as error:
            pass
        try:
            await UndefinedKoala_commands[command](message)
        except KeyError as error:
            await message.answer(
                f"–ö–æ–º–∞–Ω–¥–∞ {command} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–≤–µ–¥–∏ /exit, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω."
            )

    @staticmethod
    async def send_onboarding_request(message):
        await asyncio.sleep(1.5)
        last_message = await message.answer(
            "‚ö†Ô∏è –•–æ—á–µ—à—å —è —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∂—É, –∏–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç –±–æ—Ç –∏ –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?",
            reply_markup=onboarding_request_keyboard,
        )
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["chat"]["id"]).first()
        )
        customer.last_sended_message_id = last_message["message_id"]
        session.commit()

    @staticmethod
    async def cancel_onboarding_request(message):
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["from"]["id"]).first()
        )
        await bot.delete_message(customer.id, customer.last_sended_message_id)
        await bot.send_message(
            message["from"]["id"],
            "–•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /edu –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–≤–æ–µ–º—É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É.",
            reply_markup=UndefinedKoala_keyboard,
        )

    @staticmethod
    async def accept_onboarding_request(message):
        session = Session()
        customer = (
            session.query(Customer)
            .filter(Customer.id == message["message"]["chat"]["id"])
            .first()
        )
        customer.current_state = "OnboardingState"
        session.commit()
        await OnboardingState.send_onboarding_step(message)

    @staticmethod
    async def start(message):
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! \n\n–≠—Ç–æ Tatrika ‚Äî –±–æ—Ç, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑—É—á–∞—Ç—å —Ç–∞—Ç–∞—Ä—Å–∫–∏–π —è–∑—ã–∫, —Ç—Ä–∞—Ç—è –≤—Å–µ–≥–æ 15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å!\n\n–ü—Ä–æ—Ö–æ–¥–∏ –º–∏–Ω–∏-—É—Ä–æ–∫–∏, —Å–æ—Ä–µ–≤–Ω—É–π—Å—è –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏ –≤ –∏–≥—Ä–∞—Ö, –∞ –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–º–µ–ª–æ –∑–∞–¥–∞–≤–∞–π –∏—Ö —Å–≤–æ–µ–º—É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É."
        )
        await asyncio.sleep(1.5)
        await UndefinedKoala.send_onboarding_request(message)

    @staticmethod
    async def auth_with_phone(message):
        session = Session()
        customer = (
            session.query(Customer).filter(Customer.id == message["chat"]["id"]).first()
        )
        if customer:
            if customer.phone_number:
                await message.answer(
                    "–¢—ã —É–∂–µ –¥–µ–ª–∏–ª—Å—è —Å –Ω–∞–º–∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üòú"
                )
            else:
                customer.phone_number = message.contact.phone_number
                session.commit()
                await message.answer(
                    "‚úÖ –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                    reply_markup=UndefinedKoala_keyboard,
                )
                await LKState.start(message)
        else:
            await message.answer(
                "–î–µ–ª–∏—à—å—Å—è –Ω–æ–º–µ—Ä–æ–º –µ—â—ë –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ —Ç–µ–±—è –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –æ–± —ç—Ç–æ–º???\n\n–ù—É –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!"
            )

    @staticmethod
    async def send_phone_request(message):
        await message.answer(
            "–ü–æ–¥–µ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –Ω–∞ —Å–∞–π—Ç–µ.\n\n–ó–∞—á–µ–º –º–Ω–µ –Ω—É–∂–µ–Ω –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç?\n‚ú≥ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏–∑—É—á–µ–Ω–∏–∏ —Ç–∞—Ç–∞—Ä—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n\n",
            reply_markup=phone_request_keyboard,
        )

    @staticmethod
    async def cancel_phone_request(message):
        await message.answer(
            "–•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å–ª–∏ –≤—Å—ë –∂–µ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.",
            reply_markup=empty_keyboard,
        )
        await UndefinedKoala.send_onboarding_request(message)


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler()
async def text_commands_handler(message):
    user_state = await get_user_state_from_text_commands(message)
    await states[user_state].commands_handler(message)


@dp.callback_query_handler()
async def inline_commands_handler(message):
    user_state = await get_user_state_from_inline_commands(message)
    await states[user_state].commands_handler(message)


@dp.message_handler(content_types=["contact"])
async def get_contact(message):
    user_state = await get_user_state_from_text_commands(message)
    await states[user_state].auth_with_phone(message)


onboarding_steps = {
    1: "üòâ –û—Ç–ª–∏—á–Ω–æ!\n\n–°–µ–π—á–∞—Å —è —Ä–∞—Å—Å–∫–∞–∂—É, –∏–∑ —á–µ–≥–æ —Å–æ—Å—Ç–æ–∏—Ç –±–æ—Ç –∏ –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.\n\n–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ < –∏ >.",
    2: "(1/3) –ù–∞—à –±–æ—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 —Ä–∞–∑–¥–µ–ª–æ–≤.\n\n- –ò–∑—É—á–∞—Ç—å",
    3: "(2/3)",
    4: "(3/3)",
}

OnboardingState_commands = {
    "next_onboarding_step": OnboardingState.set_next_onboarding_step,
    "prev_onboarding_step": OnboardingState.set_prev_onboarding_step,
    "/exit": BaseState.exit,
}


UndefinedKoala_commands = {
    "/start": UndefinedKoala.start,
    "accept_onboarding_request": UndefinedKoala.accept_onboarding_request,
    "cancel_onboarding_request": UndefinedKoala.cancel_onboarding_request,
    "–ò–∑—É—á–∞—Ç—å": 0,
    "–ò–≥—Ä–∞—Ç—å": 0,
    "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å": MentoringState.start,
    "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç": LKState.start,
    "/exit": BaseState.exit,
}


states = {
    "UndefinedKoala": UndefinedKoala,
    "EducationState": EducationState,
    "OnboardingState": OnboardingState,
    "MentoringState": MentoringState,
    "LKState": LKState,
}


keyboards = {"UndefinedKoala": UndefinedKoala_keyboard}


suitable_question_length = 140


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
